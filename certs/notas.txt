//routes/commerces.js
const express = require('express');
const router = express.Router();
const { Pool } = require('pg');
const bcrypt = require('bcryptjs');
const authMiddleware = require('../middlewares/authMiddleware'); // Middleware de autenticación

// Conexión a PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

/**
 * GET /api/commerces
 * Listar todos los comercios (solo accesible para el superusuario)
 */
router.get('/', authMiddleware, async (req, res) => {
  try {
    // Verificar si el usuario es SUPERUSER
    if (req.user.role !== 'SUPERUSER') {
      return res.status(403).json({ error: 'No tienes permisos para acceder a esta información' });
    }
    const result = await pool.query('SELECT * FROM commerces ORDER BY id ASC');
    res.json(result.rows);
  } catch (error) {
    console.error('Error en GET /commerces:', error);
    res.status(500).json({ error: 'Error al obtener comercios' });
  }
});

/**
 * PUT /api/commerces/:id/update-logo
 * Permite actualizar la URL del logo de un comercio
 * Solo accesible para el superusuario
 */
router.put('/:id/update-logo', authMiddleware, async (req, res) => {
  const { id } = req.params;
  const { logoUrl } = req.body;

  console.log("📌 Datos recibidos para actualizar logo:", { id, logoUrl }); // 🔍 Verificar qué llega al backend
  console.log(`🔹 Solicitud recibida en /update-logo para ID: ${id}`);
  console.log(`🔹 Logo URL recibida: ${logoUrl}`);

  // Verificar si el usuario es SUPERUSER
  if (req.user.role !== 'SUPERUSER') {
    return res.status(403).json({ error: 'No tienes permisos para actualizar el logo' });
  }

  if (!logoUrl) {
    return res.status(400).json({ error: 'Falta la URL de la imagen' });
  }

  try {
    const query = `
      UPDATE commerces
      SET logo_url = $1, updated_at = CURRENT_TIMESTAMP
      WHERE id = $2
      RETURNING *`;
    const result = await pool.query(query, [logoUrl, id]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Comercio no encontrado' });
    }

    res.json({ message: 'Logo actualizado correctamente', commerce: result.rows[0] });
  } catch (error) {
    console.error('Error en PUT /commerces/:id/update-logo:', error);
    res.status(500).json({ error: 'Error al actualizar el logo' });
  }
});

/**
 * POST /api/commerces
 * Crear un nuevo comercio (solo superusuario)
 */
router.post('/', authMiddleware, async (req, res) => {
  const { subdomain, business_name } = req.body;
  try {
    // Verificar si el usuario es SUPERUSER
    if (req.user.role !== 'SUPERUSER') {
      return res.status(403).json({ error: 'No tienes permisos para crear comercios' });
    }
    const query = `
      INSERT INTO commerces (subdomain, business_name)
      VALUES ($1, $2)
      RETURNING *`;
    const values = [subdomain, business_name];
    const result = await pool.query(query, values);
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('Error en POST /commerces:', error);
    if (error.code === '23505') {
      return res.status(400).json({ error: 'El subdominio ya existe. Elige otro.' });
    }
    res.status(500).json({ error: 'Error al crear el comercio' });
  }
});

module.exports = router;


// src/app.js

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

// Cargar las variables de entorno
require('dotenv').config({ path: __dirname + '/.env' });
console.log('DATABASE_URL:', process.env.DATABASE_URL);

// Importar dependencias
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');

// Importar routers y middlewares
const authRoutes = require('../routes/auth');
const commerceRoutes = require('../routes/commerces');
const authMiddleware = require('../middlewares/authMiddleware');
const categoriesRouter = require('../routes/categories');
const productsRouter = require('../routes/products');
const uploadRoutes = require('../routes/upload'); // ✅ Importamos uploadRoutes

// Inicializar la aplicación Express
const app = express();

// Configurar middlewares
app.use(express.json());

// Configurar CORS para permitir solo desde http://localhost:3000
const corsOptions = {
  origin: "http://localhost:3000",
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

// Forzar que la cadena de conexión incluya sslmode=require
let connectionString = process.env.DATABASE_URL;
if (connectionString && !connectionString.includes('sslmode=require')) {
  connectionString += connectionString.includes('?') ? '&sslmode=require' : '?sslmode=require';
}

// Conexión a PostgreSQL
const pool = new Pool({
  connectionString: connectionString,
  ssl: {
    require: true,
    rejectUnauthorized: false,
  },
});

// Probar la conexión a la base de datos
pool.connect()
  .then(() => console.log('Conexión a PostgreSQL establecida correctamente'))
  .catch(err => console.error('Error al conectar a PostgreSQL:', err));

// Middleware para extraer el subdominio (tenant)
app.use((req, res, next) => {
  const host = req.headers.host || '';
  const parts = host.split('.');
  req.tenant = (parts.length >= 3) ? parts[0] : 'default';
  console.log(`Tenant identificado: ${req.tenant}`);
  next();
});

// Ruta de prueba
app.get('/', (req, res) => {
  res.send('API funcionando');
});

// Rutas
app.use('/api/auth', authRoutes);
app.use('/api/commerces', authMiddleware, commerceRoutes);
app.use('/api/categories', authMiddleware, categoriesRouter);
app.use('/api/products', authMiddleware, productsRouter);
app.use('/api/upload', uploadRoutes);

const expressListEndpoints = require("express-list-endpoints");
console.log("📌 Rutas cargadas en Express:");
console.log(expressListEndpoints(app));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Servidor corriendo en el puerto ${PORT}`);
});